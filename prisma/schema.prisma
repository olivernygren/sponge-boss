// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(MEMBER)
  is_dormant    Boolean    @default(false)
  schedules     Schedule[] // En användare kan ha många schemalagda veckor

  // För Auth.js
  accounts Account[]
  sessions Session[]
}

model Schedule {
  id     String  @id @default(cuid())
  year   Int
  week   Int     // Veckonummer
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Används för "delat ansvar" eller om ingen har ansvar
  note   String? 

  @@unique([year, week]) // Bara en post per vecka/år
}

model RememberText {
  id    String @id @default(cuid())
  text  String
  order Int    @default(0) // För att kunna sortera
}

enum Role {
  ADMIN
  MEMBER
}

// Modeller för Auth.js (kopiera från deras dokumentation)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}